#!/usr/bin/python3 -u

# @file package_tool
# @author Frederich Stine
# @brief host tool for packaging a feature for a fob
# @date 2023
#
# This source file is part of an example system for MITRE's 2023 Embedded
# CTF (eCTF). This code is being provided only for educational purposes for the
# 2023 MITRE eCTF competition, and may not meet MITRE standards for quality.
# Use this code at your own risk!
#
# @copyright Copyright (c) 2023 The MITRE Corporation

import argparse
import json
import random
from Crypto.Random import get_random_bytes
from Crypto.Hash import SHA256
from Crypto.PublicKey import ECC
from Crypto.Signature import DSS


def gen_individual_feature(factory_secrets, car_id, feature_number):
    
    ecc_key = ECC.import_key(bytes.fromhex(factory_secrets['privkey']))
    feature_seed = bytes.fromhex(factory_secrets['car' + str(car_id)]['feature_seed'])

    random.seed(0)

    data = car_id.to_bytes(1, 'little') + feature_number.to_bytes(1, 'little') + random.randbytes(30)

    h = SHA256.new(data)
    signer = DSS.new(ecc_key, 'fips-186-3')
    signature = signer.sign(h)

    # Create package to match defined structure on fob
    return (data, signature)


def gen_signatures(factory_secrets, car_id):

    sigs = {}

    ecc_key = ECC.import_key(bytes.fromhex(factory_secrets['privkey']))

    features = []
    for x in range(3):
        features.append(gen_individual_feature(factory_secrets, car_id, x))

    for enabled_features in range(1, 0b1000):

        h = SHA256.new(enabled_features.to_bytes(1, 'little'))

        if enabled_features & 0x01:
            h.update(features[0][0])
            #h.update(features[0][1])
        else:
            h.update(b'\xff'*32)
            #h.update(b'\xff'*64)

        if enabled_features & 0x02:
            h.update(features[1][0])
            #h.update(features[1][1])
        else:
            h.update(b'\xff'*32)
            #h.update(b'\xff'*64)
        
        if enabled_features & 0x04:
            h.update(features[2][0])
            #h.update(features[2][1])
        else:
            h.update(b'\xff'*32)
            #h.update(b'\xff'*64)
        
        signer = DSS.new(ecc_key, 'fips-186-3')
        sigs[enabled_features] = signer.sign(h).hex()
    
    return sigs




# @brief Function to create a new feature package
# @param package_name, name of the file to output package data to
# @param car_id, the id of the car the feature is being packaged for
# @param feature_number, the feature number being packaged
def package(package_name, car_id, feature_number):

    # Pad id lenth to 8 bytes
    car_id = int(car_id) & 0xff
    feature_number = (int(feature_number) & 0xff) % 3 # we only support 3 features :/

    s = open('/secrets/car_secrets.json', "r")
    factory_secrets = json.load(s)

    message_out = {
        'feature': b''.join(x for x in gen_individual_feature(factory_secrets, car_id, feature_number)).hex(),
        'sigs': gen_signatures(factory_secrets, car_id)
    }

    # Write data out to package file
    # /package_dir/ is the mounted location inside the container - should not change
    with open(f"/package_dir/{package_name}", "w") as fhandle:
        fhandle.write(json.dumps(message_out))

    print("Feature packaged")


# @brief Main function
#
# Main function handles parsing arguments and passing them to program
# function.
def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--package-name", help="Name of the package file", type=str, required=True,
    )
    parser.add_argument(
        "--car-id", help="Car ID", type=str, required=True,
    )
    parser.add_argument(
        "--feature-number",
        help="Number of the feature to be packaged",
        type=int,
        required=True,
    )

    args = parser.parse_args()

    package(args.package_name, args.car_id, args.feature_number)


if __name__ == "__main__":
    main()
