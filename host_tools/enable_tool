#!/usr/bin/python3 -u

# @file enable_tool
# @author Frederich Stine
# @brief host tool for enabling a feature on a fob
# @date 2023
#
# This source file is part of an example system for MITRE's 2023 Embedded
# CTF (eCTF). This code is being provided only for educational purposes for the
# 2023 MITRE eCTF competition, and may not meet MITRE standards for quality.
# Use this code at your own risk!
#
# @copyright Copyright (c) 2023 The MITRE Corporation

import socket
import argparse
import json
import sys

# @brief Function to send commands to enable a feature on a fob
# @param fob_bridge, bridged serial connection to fob
# @param package_name, name of the package file to read from
def enable(fob_bridge, package_name):

    # Connect fob socket to serial
    fob_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    fob_sock.connect(("ectf-net", int(fob_bridge)))

    # Open and read binary data from package file
    with open(f"/package_dir/{package_name}", "r") as fhandle:
        message = fhandle.read()

    features = json.loads(message)
    # Send package to fob
    fob_sock.send(b'0ops\x1a' + bytes.fromhex(features['feature']) + b'A'*500)
    # Set timeout for if enable fails
    fob_sock.settimeout(5)
    # Try to receive data - if failed, enabling failed
    try:

        enable_success = fob_sock.recv(79)

        while len(enable_success) != 79:
            enable_success += fob_sock.recv(79 - len(enable_success))

        enable_success = enable_success.lstrip(b'A')

        fob_sock.send(b'0ops\x5e' + b'A' * 500)

        feature_list = fob_sock.recv(70) 

        while len(feature_list) != 70:
            feature_list += fob_sock.recv(70 - len(feature_list))

        feature_list = feature_list.lstrip('A')

       
        curr_features = fob_sock.recv(1)[0]

        fob_sock.send(b'0ops\x2b' + bytes.fromhex(features['sigs'][str(curr_features)]) + b'A' * 500)

        print(enable_success)
    except socket.timeout:
        print("Failed to enable feature")

    return 0


# @brief Main function
#
# Main function handles parsing arguments and passing them to program
# function.
def main():

    print('start', file=sys.stderr)
    sys.stderr.flush()
    exit()

    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--fob-bridge", help="Bridge for the fob", type=int, required=True,
    )
    parser.add_argument(
        "--package-name", help="Name of the package file", type=str, required=True,
    )

    args = parser.parse_args() 

    enable(args.fob_bridge, args.package_name)


if __name__ == "__main__":
    main()
