#!/usr/bin/python3 -u

# @file enable_tool
# @author Frederich Stine
# @brief host tool for enabling a feature on a fob
# @date 2023
#
# This source file is part of an example system for MITRE's 2023 Embedded
# CTF (eCTF). This code is being provided only for educational purposes for the
# 2023 MITRE eCTF competition, and may not meet MITRE standards for quality.
# Use this code at your own risk!
#
# @copyright Copyright (c) 2023 The MITRE Corporation

import socket
import argparse
import json
import sys

# @brief Function to send commands to enable a feature on a fob
# @param fob_bridge, bridged serial connection to fob
# @param package_name, name of the package file to read from
def enable(fob_bridge, package_name):

    # Open and read binary data from package file
    with open(f"/package_dir/{package_name}", "r") as fhandle:
        message = fhandle.read()

    features = json.loads(message)

    add_feat = (b'\x1a' + bytes.fromhex(features['feature'])).ljust(127) + b'\n'

    # Connect fob socket to serial
    fob_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    fob_sock.connect(("ectf-net", int(fob_bridge)))


    # Send package to fob
    fob_sock.send(add_feat)
    # Set timeout for if enable fails
    fob_sock.settimeout(5)
    # Try to receive data - if failed, enabling failed
    enable_success = b''
    try:

        enable_success = fob_sock.recv(20)
        while len(enable_success) != 20:
            enable_success += fob_sock.recv(20 - len(enable_success))

    except socket.timeout:
        sys.exit("Failed to enable feature")

    return

    try:

        query_feats = b'\x5e'.ljust(128)
        fob_sock.send(query_feats)

        feature_list = fob_sock.recv(11) 

        while len(feature_list) != 11:
            feature_list += fob_sock.recv(11 - len(feature_list))

        sig_index = feature_list[-1]

        signature = (b'\x2b' + bytes.fromhex(features['sigs'][str(sig_index)])).ljust(128)

        fob_sock.send(signature)

        # fyi, doesn't show up sometimes, but feature still gets added
        print('Enabled')

    except socket.timeout:
        sys.exit("Failed to enable feature")
    

    return 0


# @brief Main function
#
# Main function handles parsing arguments and passing them to program
# function.
def main():

    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--fob-bridge", help="Bridge for the fob", type=int, required=True,
    )
    parser.add_argument(
        "--package-name", help="Name of the package file", type=str, required=True,
    )

    args = parser.parse_args() 

    enable(args.fob_bridge, args.package_name)


if __name__ == "__main__":
    main()
